import {
    ChannelType,
    ChatInputCommandInteraction,
    Colors,
    CommandInteraction,
    EmbedBuilder,
    MessageFlags,
    TextChannel
} from "discord.js";
import db from "../db/main";
import { trollVoice } from "../db/schema";
import { gt } from "drizzle-orm";
import { STAFF_VOICE_ID } from "../cfg";

const timeout = 1000 * 60 * 10;

export async function processingTrollVoice(interaction: ChatInputCommandInteraction, isAdmin: boolean) {
    await interaction.deferReply({ flags: MessageFlags.Ephemeral });

    const user = interaction.options.getUser("–º—É—á–µ–Ω–∏–∫", true);
    const member = await interaction.guild?.members.fetch(user.id);

    const transfers = interaction.options.getNumber("–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π", false) ?? 10;
    const delay = interaction.options.getNumber("–∑–∞–¥–µ—Ä–∂–∫–∞", false);

    if (!isAdmin && delay) {
        return interaction.editReply({
            content: "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        });
    }

    if (!isAdmin && transfers > 20) {
        return interaction.editReply({
            content: "‚ùå –õ–∏–º–∏—Ç - 20 –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π"
        });
    }

    if (!member) {
        return interaction.editReply({
            content: "‚ùå –Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        });
    }

    const count = await db.$count(trollVoice, gt(trollVoice.createdAt, Date.now() - timeout));

    // if (count > 0 && !isAdmin) {
    if (count > 0) {
        return interaction.editReply({
            content: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º—É—á–∞–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!"
        });
    }
    const voice = member?.voice;

    const currentChannelId = voice.channel?.id;

    if (!currentChannelId) {
        return interaction.editReply({
            content: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ –≤ –≤–æ–π—Å–µ :("
        });
    }

    await interaction.editReply({
        content: "–ù–∞—á–∏–Ω–∞–µ–º –º—É—á–µ–Ω–∏—è :)"
    });

    await voice.setMute(true, "–¢–∞–∫ –Ω–∞–¥–æ, –±—Ä–æ");

    const fetchedChannels = await interaction.guild?.channels.fetch();

    if (!fetchedChannels) {
        return interaction.editReply({
            content: "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        });
    }

    const filteredChannelsCollection = fetchedChannels.filter(
        (channel) => channel?.type === ChannelType.GuildVoice && channel?.id !== STAFF_VOICE_ID
    );

    const filteredChannels = Array.from(filteredChannelsCollection);

    const channelsCount = filteredChannels.length;

    for (let i = 0; i < transfers; i++) {
        const index = i % channelsCount;
        const targetChannelId = filteredChannels[index][0];

        try {
            await member.voice.setChannel(targetChannelId);
        } catch (error) {
            console.error(error);
        }

        await new Promise((resolve) => setTimeout(resolve, delay ?? 500));
    }

    await voice.setMute(false, "–¢–∞–∫ –Ω–∞–¥–æ, –±—Ä–æ");
    await member.voice.setChannel(currentChannelId);

    const announcementChannel = interaction.channel;

    if (announcementChannel && announcementChannel.isTextBased() && "send" in announcementChannel) {
        const embed = new EmbedBuilder()
            .setTitle("üîî –ú—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            .setColor(Colors.Red)
            .addFields(
                { name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value: member.user.tag, inline: true },
                { name: "–ö–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª", value: interaction.user.tag, inline: true },
                { name: "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–π", value: transfers.toString(), inline: true },
                { name: "–ó–∞–¥–µ—Ä–∂–∫–∞", value: `${delay ?? 500} –º—Å`, inline: true }
            )
            .setFooter({ text: "–ë–æ—Ç –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –ø–æ—Ä—è–¥–∫–µ!" })
            .setTimestamp();

        await announcementChannel.send({ embeds: [embed] });
    }
}
