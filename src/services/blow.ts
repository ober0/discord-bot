import {
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ChatInputCommandInteraction,
    ComponentType,
    MessageFlags
} from "discord.js";

export async function blow(interaction: ChatInputCommandInteraction) {
    const user = interaction.options.getUser("—é–∑–µ—Ä");
    const minutes = interaction.options.getInteger("–≤—Ä–µ–º—è") ?? 0.1;

    if (!user) {
        return await interaction.reply({
            content: "–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            ephemeral: true
        });
    }

    let count = 0;
    const votedUsers = new Set<string>();

    const createMainButton = (currentCount: number) => {
        return new ButtonBuilder()
            .setCustomId(`blow-user-${user.id}`)
            .setLabel(`–û–±–æ—Å—Å–∞–ª–∏ ${currentCount} —Ä–∞–∑`)
            .setStyle(ButtonStyle.Primary)
            .setEmoji("üí¶");
    };

    const createPersonalButton = (currentCount: number, hasVoted: boolean) => {
        return new ButtonBuilder()
            .setCustomId(`blow-user-${user.id}`)
            .setLabel(hasVoted ? `–í—ã –æ–±–æ—Å—Å–∞–ª–∏ ${user.username}` : `–û–±–æ—Å—Å–∞–ª–∏ ${currentCount} —Ä–∞–∑`)
            .setStyle(hasVoted ? ButtonStyle.Success : ButtonStyle.Primary)
            .setEmoji("üí¶")
            .setDisabled(hasVoted);
    };

    const mainButton = createMainButton(count);
    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(mainButton);

    const endTime = new Date(Date.now() + 1000 * 60 * minutes);

    const formattedEndTime = endTime.toLocaleDateString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        hour12: false
    });

    const response = await interaction.reply({
        content: `<@${user.id}> **–¢–µ–±—è –æ—Ç–ø–µ—Ç—É—à–∏–ª–∏!** \n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã **–æ–±–æ—Å—Å–∞—Ç—å** ${user.username}\n–£ –≤–∞—Å –µ—Å—Ç—å **${minutes} –º–∏–Ω—É—Ç (–¥–æ ${formattedEndTime})**`,
        components: [row]
    });

    const collector = response.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 1000 * 60 * minutes
    });

    collector.on("collect", async (i) => {
        if (i.customId === `blow-user-${user.id}`) {
            if (votedUsers.has(i.user.id)) {
                return await i.followUp({
                    content: `üö´ –í—ã —É–∂–µ –æ–±–æ—Å—Å–∞–ª–∏ ${user.username}! (–í—Å–µ–≥–æ: ${count} —Ä–∞–∑)`,
                    ephemeral: true
                });
            }

            votedUsers.add(i.user.id);
            count++;

            const updatedButton = createMainButton(count);
            const updatedRow = new ActionRowBuilder<ButtonBuilder>().addComponents(updatedButton);

            await i.update({
                content: `<@${user.id}> **–¢–µ–±—è –æ—Ç–ø–µ—Ç—É—à–∏–ª–∏!** \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ–±–æ—Å—Å–∞—Ç—å ${user.username}\n–£ –≤–∞—Å –µ—Å—Ç—å **${minutes} –º–∏–Ω—É—Ç (–¥–æ ${formattedEndTime})**`,
                components: [updatedRow]
            });
        }
    });

    collector.on("end", async () => {
        const disabledButton = new ButtonBuilder()
            .setCustomId(`blow-user-${user.id}`)
            .setLabel(`–û–±–æ—Å—Å–∞–ª–∏ ${count} —Ä–∞–∑`)
            .setStyle(ButtonStyle.Secondary)
            .setEmoji("üí¶")
            .setDisabled(true);

        const disabledRow = new ActionRowBuilder<ButtonBuilder>().addComponents(disabledButton);

        await interaction.editReply({
            components: [disabledRow]
        });

        await interaction.followUp({
            content: `üèÅ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n–ù–∞ ${user} –ø–æ—Å—Å–∞–ª–∏ ${count} —á–µ–ª–æ–≤–µ–∫`,
            allowedMentions: { users: [] }
        });

        const users = Array.from(votedUsers);

        const userPromises = users.map((userId) => interaction.guild?.members.fetch(userId).catch(() => null));
        const members = await Promise.all(userPromises);

        const validMembers = members.filter(Boolean);

        const userList = validMembers.map((member) => `‚Ä¢ ${member?.user.username}`).join("\n");

        await interaction.followUp({
            content: `–°–ø–∏—Å–æ–∫ –Ω–∞–∂–∞–≤—à–∏—Ö –∫–Ω–æ–ø–∫—É: \n ${userList}`,
            flags: MessageFlags.Ephemeral
        });
    });
}
